{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\regin\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\neobank-app\\\\neobank-app-main\\\\src\\\\components\\\\Table.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = () => {\n  _s();\n  const pathname = window.location.pathname;\n  let id = pathname.split(\"/\");\n  id = id[2];\n  useEffect(() => {\n    fetch(`http://localhost:8080/admin/application/${id}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(arr => {\n      for (let i = 0; i < arr.credit.paymentSchedule.length; i++) {\n        document.querySelector(\"#table\").innerHTML += `\n        <tr>\n              <td>${arr.credit.paymentSchedule[i].number}</td>\n              <td>${arr.credit.paymentSchedule[i].date}</td>\n              <td>${arr.credit.paymentSchedule[i].totalPayment}</td>\n              <td>${arr.credit.paymentSchedule[i].interestPayment}</td>\n              <td>${arr.credit.paymentSchedule[i].debtPayment}</td>\n              <td>${arr.credit.paymentSchedule[i].remainingDebt}</td>\n        </tr>\n              `;\n      }\n    });\n  }, []);\n  const sortTable = n => {\n    var table,\n      rows,\n      switching,\n      i,\n      x,\n      y,\n      shouldSwitch,\n      dir,\n      switchcount = 0;\n    table = document.getElementById(\"table\");\n    switching = true;\n    // Set the sorting direction to ascending:\n    dir = \"asc\";\n    /* Make a loop that will continue until\r\n    no switching has been done: */\n    while (switching) {\n      // Start by saying: no switching is done:\n      switching = false;\n      rows = table.rows;\n      /* Loop through all table rows (except the\r\n      first, which contains table headers): */\n      for (i = 1; i < rows.length - 1; i++) {\n        // Start by saying there should be no switching:\n        shouldSwitch = false;\n        /* Get the two elements you want to compare,\r\n        one from current row and one from the next: */\n        x = rows[i].getElementsByTagName(\"TD\")[n];\n        y = rows[i + 1].getElementsByTagName(\"TD\")[n];\n        /* Check if the two rows should switch place,\r\n        based on the direction, asc or desc: */\n        if (dir == \"asc\") {\n          if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\n            // If so, mark as a switch and break the loop:\n            shouldSwitch = true;\n            break;\n          }\n        } else if (dir == \"desc\") {\n          if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {\n            // If so, mark as a switch and break the loop:\n            shouldSwitch = true;\n            break;\n          }\n        }\n      }\n      if (shouldSwitch) {\n        /* If a switch has been marked, make the switch\r\n        and mark that a switch has been done: */\n        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n        switching = true;\n        // Each time a switch is done, increase this count by 1:\n        switchcount++;\n      } else {\n        /* If no switching has been done AND the direction is \"asc\",\r\n        set the direction to \"desc\" and run the while loop again. */\n        if (switchcount == 0 && dir == \"asc\") {\n          dir = \"desc\";\n          switching = true;\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"payment_table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        className: \"payment_header\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: sortTable(0),\n            children: \"NUMBER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: sortTable(1),\n            children: \"DATE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: sortTable(2),\n            children: \"TOTAL PAYMENT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: sortTable(3),\n            children: \"INTEREST PAYMENT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: sortTable(4),\n            children: \"DEBT PAYMENT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: sortTable(5),\n            children: \"REMAINING DEBT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        id: \"table\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(Table, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","useEffect","Table","pathname","window","location","id","split","fetch","method","headers","then","response","json","arr","i","credit","paymentSchedule","length","document","querySelector","innerHTML","number","date","totalPayment","interestPayment","debtPayment","remainingDebt","sortTable","n","table","rows","switching","x","y","shouldSwitch","dir","switchcount","getElementById","getElementsByTagName","toLowerCase","parentNode","insertBefore"],"sources":["C:/Users/regin/OneDrive/Рабочий стол/neobank-app/neobank-app-main/src/components/Table.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst Table=()=> {\r\n  const pathname = window.location.pathname;\r\n  let id = pathname.split(\"/\");\r\n  id = id[2];\r\n\r\n\r\n  useEffect(() => {\r\n   \r\n    fetch(`http://localhost:8080/admin/application/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((arr) => {\r\n        for (let i = 0; i < arr.credit.paymentSchedule.length; i++) {\r\n        document.querySelector(\"#table\").innerHTML += `\r\n        <tr>\r\n              <td>${arr.credit.paymentSchedule[i].number}</td>\r\n              <td>${arr.credit.paymentSchedule[i].date}</td>\r\n              <td>${arr.credit.paymentSchedule[i].totalPayment}</td>\r\n              <td>${arr.credit.paymentSchedule[i].interestPayment}</td>\r\n              <td>${arr.credit.paymentSchedule[i].debtPayment}</td>\r\n              <td>${arr.credit.paymentSchedule[i].remainingDebt}</td>\r\n        </tr>\r\n              `;\r\n      } });\r\n   \r\n  }, []);\r\n\r\n  const sortTable = (n) => {\r\n    var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;\r\n  table = document.getElementById(\"table\");\r\n  switching = true;\r\n  // Set the sorting direction to ascending:\r\n  dir = \"asc\";\r\n  /* Make a loop that will continue until\r\n  no switching has been done: */\r\n  while (switching) {\r\n    // Start by saying: no switching is done:\r\n    switching = false;\r\n    rows = table.rows;\r\n    /* Loop through all table rows (except the\r\n    first, which contains table headers): */\r\n    for (i = 1; i < (rows.length - 1); i++) {\r\n      // Start by saying there should be no switching:\r\n      shouldSwitch = false;\r\n      /* Get the two elements you want to compare,\r\n      one from current row and one from the next: */\r\n      x = rows[i].getElementsByTagName(\"TD\")[n];\r\n      y = rows[i + 1].getElementsByTagName(\"TD\")[n];\r\n      /* Check if the two rows should switch place,\r\n      based on the direction, asc or desc: */\r\n      if (dir == \"asc\") {\r\n        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\r\n          // If so, mark as a switch and break the loop:\r\n          shouldSwitch = true;\r\n          break;\r\n        }\r\n      } else if (dir == \"desc\") {\r\n        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {\r\n          // If so, mark as a switch and break the loop:\r\n          shouldSwitch = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (shouldSwitch) {\r\n      /* If a switch has been marked, make the switch\r\n      and mark that a switch has been done: */\r\n      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\r\n      switching = true;\r\n      // Each time a switch is done, increase this count by 1:\r\n      switchcount ++;\r\n    } else {\r\n      /* If no switching has been done AND the direction is \"asc\",\r\n      set the direction to \"desc\" and run the while loop again. */\r\n      if (switchcount == 0 && dir == \"asc\") {\r\n        dir = \"desc\";\r\n        switching = true;\r\n      }\r\n    }\r\n  }\r\n  }\r\n\r\n\r\n  return (\r\n   <>\r\n    <table className=\"payment_table\">\r\n      <thead className=\"payment_header\">\r\n        <tr>\r\n            <th onClick={sortTable(0)}>NUMBER</th>\r\n            <th onClick={sortTable(1)}>DATE</th>\r\n            <th onClick={sortTable(2)}>TOTAL PAYMENT</th>\r\n            <th onClick={sortTable(3)}>INTEREST PAYMENT</th>\r\n            <th onClick={sortTable(4)}>DEBT PAYMENT</th>\r\n            <th onClick={sortTable(5)}>REMAINING DEBT</th>\r\n        </tr>\r\n      </thead>\r\n     <tbody id=\"table\">\r\n\r\n     </tbody>\r\n    </table>\r\n\r\n   </>\r\n  );\r\n}\r\n\r\n\r\nexport default Table;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}